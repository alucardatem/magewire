<?php
/**
 * Copyright Â© Willem Poortman 2021-present. All rights reserved.
 *
 * Please read the README and LICENSE files for more
 * details on copyrights and license information.
 */

declare(strict_types=1);

/** @var Magewire $magewireScripts */
/** @var Escaper $escaper */
/** @var Template $block */

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Magewirephp\Magewire\Model\Action\CallMethod;
use Magewirephp\Magewire\Model\Action\FireEvent;
use Magewirephp\Magewire\Model\Action\SyncInput;
use Magewirephp\Magewire\ViewModel\Magewire;

$magewireScripts = $block->getViewModel();
?>
<?php if ($magewireScripts->pageRequiresMagewire() && $magewireScripts->getSystemConfig()->pageRequiresLoaderPluginScript()): ?>
    <script>
        'use strict';

        (() => {
            <?php /* Active loaders queue. */ ?>
            let queue = [];

            const loaderTypeResolvers = {
                <?= /** @noEscape */ SyncInput::ACTION ?>: (item, loader) => {
                    let name = item.payload.name;

                    let expression = [
                        `${ name }:${ item.payload.value }`,
                        `${ name.substr(0, name.lastIndexOf('.')) }:${ item.payload.value }`,
                        `${ name }`,
                        `${ name.substr(0, name.lastIndexOf('.')) }`
                    ].filter((expression) => {
                        return expression in loader
                    })[0] || false;

                    if (expression) {
                        return loader[expression];
                    }

                    return true;
                },
                <?= /** @noEscape */ CallMethod::ACTION ?>: (item, loader) => {
                    return loader[item.method];
                },
                <?= /** @noEscape */ FireEvent::ACTION ?>: (item, loader) => {
                    return loader[item.payload.event];
                }
            }

            const getLoaderData = function(message, component) {
                let loader = component.effects.loader || null;

                if (! loader) {
                    return null;
                }

                let data = {};

                for (let item of message.updateQueue) {
                    let value = true;

                    if (typeof loader === 'object' && item.type in loaderTypeResolvers) {
                        value = loaderTypeResolvers[item.type](item, loader);
                    } else if (typeof loader === 'string') {
                        value = [loader];
                    }

                    if (value === undefined) {
                        value = false;

                        <?php /* Include wildcard support. */ ?>
                        if ('*' in loader) {
                            value = loader['*'];
                        }
                    }

                    data[component.id] = {
                        key: Date.now(),
                        component: component,
                        loader: value,
                        update: item
                    };
                }

                return data;
            }

            //const start = function(loader, component) {
            //    <?php ///* Just start the loading spinner without any further details. */ ?>
            //    if (! loader || ! component) {
            //        Magewire.dispatchEvent(`loader:start`);
            //        return;
            //    }
            //
            //    let first = ! queue.some(({ parent }) => parent);
            //    let me = queue.findIndex(item => item && item.component && item.component.id === component.id);
            //
            //    if (first) {
            //        queue.push({
            //            loader: loader,
            //            component: component
            //        });
            //    }
            //
            //    <?php ///* Sprinkle in the missing loader when this item was added from elsewhere without
            //             knowing what the loader value is gonna be at that point in the lifecycle. */ ?>
            //    if (queue[me]) {
            //        queue[me].loader = loader;
            //    }
            //
            //    queue.forEach((item, index) => {
            //        item.parent = item.parent ?? false;
            //
            //        <?php ///* Lets find out which loader was already active before me and force it to stop. */ ?>
            //        if (me > index && item.loader) {
            //            stop(item.component, false, true);
            //        }
            //    });
            //
            //    Magewire.dispatchEvent(`loader:${ first ? 'start' : 'tick' }`, {
            //        detail: loader
            //    });
            //}

            //const stop = function(component, failure = false, force = false) {
            //    if (failure) {
            //        force = true;
            //    }
            //
            //    <?php ///* Queue items targeted to remove. */ ?>
            //    let remove = [];
            //    <?php ///* Get my own index. */ ?>
            //    const me = queue.findIndex(item => item && item.component && item.component.id === component.id);
            //
            //    if (queue[me]) {
            //        queue[me].done = true;
            //    }
            //
            //    if (force) {
            //        remove.push(me);
            //    } else if (queue.every(item => item && item.done)) {
            //        remove = Object.keys(queue);
            //    }
            //
            //    <?php ///* Run over the queue and remove those who are marked. In the meanwhile, when we hit
            //             an item which seems to have a loader, it should stop itself. */ ?>
            //    remove.forEach(index => {
            //        if (queue[index] && queue[index].loader) {
            //            Magewire.dispatchEvent(`loader:stop`, {
            //                detail: {
            //                    loader: queue[index].loader,
            //                    component: queue[index].component,
            //                    failure: failure
            //                }
            //            });
            //        }
            //
            //        delete queue[index];
            //    });
            //
            //    if (Object.values(queue).length === 0) {
            //        Magewire.dispatchEvent(`loader:done`, {
            //            detail: {
            //                component: component,
            //                failure: failure
            //            }
            //        });
            //
            //        // Empty insurance.
            //        queue = [];
            //    }
            //}

            <?php /* Magewire loader plugin registration. */ ?>
            Magewire.plugins.loader = (() => {
                return {
                    start(loader, component) {
                        return start(loader, component);
                    },
                    stop(component, failure = false, force = false) {
                        return stop(component, failure, force);
                    }
                }
            })();

            document.addEventListener('DOMContentLoaded', () => {
                let messagePromises = [];
                let messageLoaders = {};

                Magewire.hook('message.sent', (message, component) => {
                    let loader = getLoaderData(message, component) || {}

                    if (component.id in loader && loader[component.id].loader) {
                        let target = component

                        messageLoaders[`${loader[component.id].key}-${component.id}`] = {
                            id: `${loader[component.id].key}-${component.id}`,
                            loader: loader,
                            component: component,
                            queue: {}
                        }

                        messagePromises[component.id] = new Promise((resolve, reject) => {
                            Magewire.dispatchEvent(`loader:${ messagePromises.length === 0 ? 'start' : 'tick' }`, {
                                detail: loader[component.id]
                            })

                            Magewire.hook('message.processed', (message, component) => {
                                try {
                                    const tryToGrepTheLoader = messageLoaders[`${loader[component.id].key}-${component.id}`]

                                    if (tryToGrepTheLoader) {
                                        <?php /* Re-assign optional new dynamic loader values. */ ?>
                                        if (component.effects && message.response.effects) {
                                            component.effects.loader = message.response.effects.loader;
                                        }

                                        (message.response.effects.emits || []).forEach(emit => {
                                            Magewire.components.componentsListeningForEvent(emit.event)
                                                .filter(listener => !emit.to || emit.to === listener.id)
                                                .forEach(listener => {
                                                    tryToGrepTheLoader.queue[`${loader[component.id].key}-${component.id}-${listener.id}`] = {
                                                        id: `${loader[component.id].key}-${component.id}-${listener.id}`,
                                                        component: listener,
                                                        parent: component,
                                                        loader: loader
                                                    };
                                                });
                                        });

                                        if (tryToGrepTheLoader.queue.length === 0) {
                                            console.log('A')

                                            Magewire.dispatchEvent(`loader:stop`, {
                                                detail: {
                                                    loader: tryToGrepTheLoader.loader[component.id],
                                                    component: component
                                                }
                                            })

                                            resolve({
                                                target: target,
                                                component: component,
                                                loader: tryToGrepTheLoader.loader
                                            })
                                        }
                                    }
                                } catch (exception) {
                                    // IGNORE FOR NOW
                                }
                            })
                        })
                    }

                    if (messagePromises.length) {
                        Promise.all(messagePromises)
                            .catch(exception => {
                                console.log('WOOOPS', exception)
                            })
                            .finally(() => {
                                messagePromises = []

                                Magewire.dispatchEvent(`loader:done`, {
                                    detail: {
                                        component: component,
                                        failure: false
                                    }
                                })
                            })
                    }
                })

                Magewire.hook('message.processed', (message, component) => {
                    Object.values(messageLoaders).forEach((messageLoaderItem) => {
                        if (messageLoaderItem.component.id === component.id) {
                            return
                        }

                        const id = messageLoaderItem.id


                        Object.values(messageLoaderItem.queue).forEach(value => {
                            delete messageLoaders[id].queue[value.id]

                            if (Object.values(messageLoaders[id].queue).length === 0) {
                                console.log('STOPPED BY', value.id, 'FOR', id)

                                Magewire.dispatchEvent(`loader:stop`, {
                                    detail: {
                                        loader: messageLoaderItem.loader[messageLoaderItem.component.id],
                                        component: messageLoaderItem.component
                                    }
                                })

                                messagePromises.splice(messageLoaderItem.component.id, 1)
                            }
                        })
                    })
                })
            });
        })();
    </script>
<?php endif ?>
